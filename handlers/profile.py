import asyncio

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.utils.exceptions import MessageToDeleteNotFound, BotBlocked

import handlers.create
from database import users, adverts, review
from keyboards import inline


class UserAdverts(StatesGroup):
    advert = State()
    status = State()
    delete = State()
    agreement = State()


class Review(StatesGroup):
    review = State()
    paginate = State()


class ChangeRegion(StatesGroup):
    region = State()
    moscow = State()
    city = State()
    finish = State()


async def profile_menu(call: types.CallbackQuery):
    user_data = await users.get_user_data(call.from_user.id)
    grade_amount = await users.get_grade_amount(call.from_user.id)
    author_count, author_deals, user_count, user_deals = await adverts.get_amount_agreements(call.from_user.id)
    grade_text = '(–æ—Ü–µ–Ω–æ–∫ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç)' if grade_amount == 0 else f'(–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: {grade_amount})'
    text = f"<b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n<b>üÜî –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID:</b> <em>{user_data[0]}</em>" \
           f"\n<b>‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥:</b> {user_data[6]} {grade_text}"
    if user_data[3] == "–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞":
        text += f"\n\n<b>ü§ñ Username</b>: <em>{user_data[1]}</em>"
    else:
        text += f"\n\n<b>üìû –ö–æ–Ω—Ç–∞–∫—Ç</b>: <em>{user_data[3]}</em>"
    if author_deals:
        arguments_author = [str(lst[2]) for lst in author_deals]
        arguments_author_str = 'ID –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ' + ', '.join(arguments_author)
    else:
        arguments_author_str = '–°–¥–µ–ª–æ–∫ –Ω–µ—Ç'
    if user_deals:
        arguments_user = [str(lst[2]) for lst in user_deals]
        arguments_user_str = 'ID –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ' + ', '.join(arguments_user)
    else:
        arguments_user_str = '–°–¥–µ–ª–æ–∫ –Ω–µ—Ç'
    text += f"\n<b>üòä –ò–º—è</b>: <em>{user_data[2]}</em>" \
            f"\n\n<b>ü§ù –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏:</b>" \
            f"\n<b>ü§¥ –í–ª–∞–¥–µ–ª–µ—Ü:</b> {author_count[0]} ({arguments_author_str})" \
            f"\n<b>üöö –ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> {user_count[0]} ({arguments_user_str})" \
            f"\n\n<b>üåÜ –†–µ–≥–∏–æ–Ω</b>: <em>{user_data[4]}</em>" \
            f"\n<b>üè† –ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç</b>: <em>{user_data[5]}</em>"
    await call.message.edit_text(text, reply_markup=inline.profile_menu())


async def change_region(call: types.CallbackQuery):
    await call.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É —Å–≤–æ–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞:",
                                 reply_markup=await inline.region_letter_2())
    await ChangeRegion.region.set()


async def handle_change_region_letter(call: types.CallbackQuery, state: FSMContext):
    if call.data == "back_2":
        await state.finish()
        user_data = await users.get_user_data(call.from_user.id)
        grade_amount = await users.get_grade_amount(call.from_user.id)
        author_count, author_deals, user_count, user_deals = await adverts.get_amount_agreements(call.from_user.id)
        grade_text = '(–æ—Ü–µ–Ω–æ–∫ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç)' if grade_amount == 0 else f'(–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: {grade_amount})'
        text = f"<b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n<b>üÜî –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID:</b> <em>{user_data[0]}</em>" \
               f"\n<b>‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥:</b> {user_data[6]} {grade_text}"
        if user_data[3] == "–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞":
            text += f"\n\n<b>ü§ñ Username</b>: <em>{user_data[1]}</em>"
        else:
            text += f"\n\n<b>üìû –ö–æ–Ω—Ç–∞–∫—Ç</b>: <em>{user_data[3]}</em>"
        text += f"\n<b>üòä –ò–º—è</b>: <em>{user_data[2]}</em>" \
                f"\n\n<b>ü§ù –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏:</b>" \
                f"\n<b>ü§¥ –í–ª–∞–¥–µ–ª–µ—Ü:</b> {author_count[0]}" \
                f"\n<b>üöö –ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> {user_count[0]}" \
                f"\n\n<b>üåÜ –†–µ–≥–∏–æ–Ω</b>: <em>{user_data[4]}</em>" \
                f"\n<b>üè† –ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç</b>: <em>{user_data[5]}</em>"
        await call.message.edit_text(text, reply_markup=inline.profile_menu())
    else:
        letter = call.data
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ä–µ–≥–∏–æ–Ω:",
                                     reply_markup=await inline.region_list(letter))
        await state.set_state(ChangeRegion.city.state)


async def change_city_selection(call: types.CallbackQuery, state: FSMContext):
    if call.data == "back":
        await call.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É —Å–≤–æ–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞:",
                                     reply_markup=await inline.region_letter_2())
        await state.set_state(ChangeRegion.region.state)
    else:
        async with state.proxy() as data:
            data['region'] = call.data
        if call.data == '–ú–æ—Å–∫–≤–∞ –∏ –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª.':
            await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞—à–µ–≥–æ –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞",
                                         reply_markup=await inline.moscow_region_name_range())
            await state.set_state(ChangeRegion.moscow.state)
        else:
            await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –∏–ª–∏ —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–ª–∏–∂–µ –≤—Å–µ–≥–æ –∫ –≤–∞–º:",
                                         reply_markup=await inline.cities_list(call.data))
            await state.set_state(ChangeRegion.finish.state)


async def change_moscow_city_selection(call: types.CallbackQuery, state: FSMContext):
    ranges = ['–ê-–ì', '–î-–ò', '–ö-–õ', '–ú-–ü', '–†-–¢', '–£-–Ø']
    if call.data in ranges:
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –∏–ª–∏ —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–ª–∏–∂–µ –≤—Å–µ–≥–æ –∫ –≤–∞–º:",
                                     reply_markup=await inline.moscow_city_list(call.data))
        await state.set_state(ChangeRegion.finish.state)
    else:
        await state.set_state(ChangeRegion.city.state)
        async with state.proxy() as data:
            letter = data.get('region')[0]
            await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ä–µ–≥–∏–æ–Ω:",
                                         reply_markup=await inline.region_list(letter))


async def finish_change_region(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if call.data == "back":
            if data.get('region') == '–ú–æ—Å–∫–≤–∞ –∏ –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª.':
                await state.set_state(ChangeRegion.moscow.state)
                await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞—à–µ–≥–æ –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞",
                                             reply_markup=await inline.moscow_region_name_range())
            else:
                await state.set_state(ChangeRegion.city.state)
                letter = data.get('region')[0]
                await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ä–µ–≥–∏–æ–Ω:",
                                             reply_markup=await inline.region_list(letter))
        else:
            data['city'] = call.data
            await users.update_region(data.get('region'), data.get('city'), call.from_user.id)
            await call.message.edit_text("–†–µ–≥–∏–æ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=inline.main_menu())
            await state.finish()


async def my_adverts(call: types.CallbackQuery, state: FSMContext):
    results = await adverts.get_user_adverts(call.from_user.id)
    if results:
        await call.message.delete()
        current_index = 0
        result = results[current_index]
        media_group = []
        file_ids = result[4].strip().split("\n")
        for file_id in file_ids:
            media = types.InputMediaPhoto(media=file_id)
            media_group.append(media)
        username = await adverts.get_username_by_advert_id(result[0])
        status_keys = {'active': '–ê–∫—Ç–∏–≤–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', 'agreement': '–ù–∞–π–¥–µ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å',
                       'confirm': '–í–µ—â–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã'}
        status = ''
        for key, value in status_keys.items():
            if result[10] == key:
                status = value
        text = f"<b>–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {current_index + 1} –∏–∑ {len(results)}</b>\n\n" \
               f"<b>ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b> {result[0]}\n" \
               f"<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n" \
               f"<b>–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:</b> {result[1].strftime('%d-%m-%Y')}\n" \
               f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {result[9]}\n" \
               f"<b>–ù–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç:</b> {result[2]}, {result[3]}\n" \
               f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {result[5]}"
        if not result[6]:
            text += f'\n\n–í–µ—â–∏ –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å <b>—Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Å–∞–º–æ–≤—ã–≤–æ–∑</b>'
        else:
            text += f'\n\n–í–µ—â–∏ –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å <b>–¥–æ—Å—Ç–∞–≤–∫–æ–π –∏–ª–∏ —á–µ—Ä–µ–∑ —Å–∞–º–æ–≤—ã–≤–æ–∑</b>'
            if result[7] == "Author":
                text += f"\n<b>–í–ª–∞–¥–µ–ª–µ—Ü –±–µ—Ä—ë—Ç –Ω–∞ —Å–µ–±—è —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É</b>"
            elif result[7] == "User":
                text += f"\n<b>–†–∞—Å—Ö–æ–¥—ã –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –±–µ—Ä—ë—Ç –Ω–∞ —Å–µ–±—è –ø–æ–ª—É—á–∞—Ç–µ–ª—å</b>"
        media_group = await call.message.answer_media_group(media_group)
        async with state.proxy() as data:
            cap = await call.message.answer(
                text, reply_markup=inline.user_adverts(data.get('ad_id'), results, current_index))
        await UserAdverts.advert.set()
        async with state.proxy() as data:
            data['media_group'] = media_group
            data['cap'] = cap
            data['ad_id'] = result[0]
            data['current_index'] = current_index
            data['username'] = username
            data['result'] = result
    else:
        await call.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π! –°–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤–æ–µ?", reply_markup=inline.user_adverts_empty())


async def paginate_my_adverts(call: types.CallbackQuery, state: FSMContext):
    if call.data.startswith('delete_advert_'):
        async with state.proxy() as data:
            await call.message.answer(f'–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID {data.get("ad_id")}?',
                                      reply_markup=inline.yesno())
            await state.set_state(UserAdverts.delete.state)
    elif call.data.startswith('change_status_'):
        async with state.proxy() as data:
            result = data.get('result')
            status_keys = {'active': '–ê–∫—Ç–∏–≤–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', 'agreement': '–ù–∞–π–¥–µ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å',
                           'confirm': '–í–µ—â–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã'}
            for key, value in status_keys.items():
                if result[10] == key:
                    status = value
            if result[10] == 'confirm':
                text = "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å, —Ç–∞–∫ –∫–∞–∫ –≤–µ—â–∏ —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, " \
                       "–≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
            else:
                text = f'<b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è</b> - {status}\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:</b>'
            status_message = await call.message.answer(text, reply_markup=inline.new_status(result[10]))
            data['status_message'] = status_message
            await state.set_state(UserAdverts.status.state)
    elif call.data == 'main_menu_search':
        name = call.from_user.first_name
        async with state.proxy() as data:
            for message in data.get('media_group'):
                await call.bot.delete_message(call.message.chat.id, int(message.message_id))
        async with state.proxy() as data:
            message_id = data.get('cap')
            await call.bot.delete_message(call.message.chat.id, int(message_id.message_id))
        await state.finish()
        await call.message.answer(f"{name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Freebies Bot!", reply_markup=inline.main_menu())
    else:
        async with state.proxy() as data:
            try:
                for message in data.get('media_group'):
                    try:
                        await call.bot.delete_message(call.message.chat.id, int(message.message_id))
                    except MessageToDeleteNotFound:
                        pass
                try:
                    message_id = data.get('cap')
                    await call.bot.delete_message(call.message.chat.id, int(message_id.message_id))
                except MessageToDeleteNotFound:
                    pass
            except TypeError:
                pass
        results = await adverts.get_user_adverts(call.from_user.id)
        if results:
            current_index = data.get('current_index')
            result = results[current_index]
            if call.data.startswith('prev') or call.data.startswith('next'):
                callback_data = call.data.split(":")
                action = callback_data[0]
                if action == "next":
                    if current_index + 1 < len(results):
                        current_index += 1
                elif action == "prev":
                    if current_index > 0:
                        current_index -= 1
                result = results[current_index]
            media_group = []
            file_ids = result[4].strip().split("\n")
            for file_id in file_ids:
                media = types.InputMediaPhoto(media=file_id)
                media_group.append(media)
            username = await adverts.get_username_by_advert_id(result[0])
            status_keys = {'active': '–ê–∫—Ç–∏–≤–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', 'agreement': '–ù–∞–π–¥–µ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å',
                           'confirm': '–í–µ—â–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã'}
            status = ''
            for key, value in status_keys.items():
                if result[10] == key:
                    status = value
            text = f"<b>–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {current_index + 1} –∏–∑ {len(results)}</b>\n\n" \
                   f"<b>ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b> {result[0]}\n" \
                   f"<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n" \
                   f"<b>–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:</b> {result[1].strftime('%d-%m-%Y')}\n" \
                   f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {result[9]}\n" \
                   f"<b>–ù–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç:</b> {result[2]}, {result[3]}\n" \
                   f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {result[5]}"
            if not result[6]:
                text += f'\n\n–í–µ—â–∏ –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å <b>—Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Å–∞–º–æ–≤—ã–≤–æ–∑</b>'
            else:
                text += f'\n\n–í–µ—â–∏ –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å <b>–¥–æ—Å—Ç–∞–≤–∫–æ–π –∏–ª–∏ —á–µ—Ä–µ–∑ —Å–∞–º–æ–≤—ã–≤–æ–∑</b>'
                if result[7] == "Author":
                    text += f"\n<b>–í–ª–∞–¥–µ–ª–µ—Ü –±–µ—Ä—ë—Ç –Ω–∞ —Å–µ–±—è —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É</b>"
                elif result[7] == "User":
                    text += f"\n<b>–†–∞—Å—Ö–æ–¥—ã –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –±–µ—Ä—ë—Ç –Ω–∞ —Å–µ–±—è –ø–æ–ª—É—á–∞—Ç–µ–ª—å</b>"
            media_group = await call.message.answer_media_group(media_group)
            cap = await call.message.answer(
                text, reply_markup=inline.user_adverts(data.get('ad_id'), results, current_index))
            await UserAdverts.advert.set()
            async with state.proxy() as data:
                data['media_group'] = media_group
                data['cap'] = cap
                data['ad_id'] = result[0]
                data['current_index'] = current_index
                data['username'] = username
                data['result'] = result


async def delete_advert(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'yes':
        async with state.proxy() as data:
            try:
                for message in data.get('media_group'):
                    try:
                        await call.bot.delete_message(call.message.chat.id, int(message.message_id))
                    except MessageToDeleteNotFound:
                        pass
                try:
                    message_id = data.get('cap')
                    await call.bot.delete_message(call.message.chat.id, int(message_id.message_id))
                except MessageToDeleteNotFound:
                    pass
            except TypeError:
                pass
        await adverts.delete_advert(data.get('ad_id'))
        await call.message.edit_text("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!", reply_markup=inline.profile_menu())
        await state.finish()
    else:
        message = await call.message.edit_text("–û–∫–µ–π, –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        await state.set_state(UserAdverts.advert.state)
        await asyncio.sleep(3)
        await call.bot.delete_message(call.message.chat.id, message.message_id)


async def change_status(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'back':
        message = await call.message.edit_text("–û–∫–µ–π, –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        await state.set_state(UserAdverts.advert.state)
        await asyncio.sleep(3)
        await call.bot.delete_message(call.message.chat.id, message.message_id)
    elif call.data == 'create':
        await state.finish()
        await handlers.create.start_creation(call)
    elif call.data == 'agreement':
        await state.set_state(UserAdverts.agreement.state)
        agreement_message = await call.message.edit_text("–ü–æ–ø—Ä–æ—Å–∏—Ç–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å, "
                                                         "–µ–≥–æ ID –≤ –±–æ—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ "
                                                         "\n(–û–Ω –º–æ–∂–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'):")
        async with state.proxy() as data:
            data['agreement_message'] = agreement_message
    elif call.data == 'active':
        async with state.proxy() as data:
            try:
                for message in data.get('media_group'):
                    try:
                        await call.bot.delete_message(call.message.chat.id, int(message.message_id))
                    except MessageToDeleteNotFound:
                        pass
                try:
                    message_id = data.get('cap')
                    await call.bot.delete_message(call.message.chat.id, int(message_id.message_id))
                except MessageToDeleteNotFound:
                    pass
            except TypeError:
                pass
        async with state.proxy() as data:
            await call.message.edit_text(f"–û–∫–µ–π, –æ–±—ä—è–≤–ª–µ–Ω–∏–µ c ID {data.get('ad_id')} "
                                         f"—Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!",
                                         reply_markup=inline.profile_menu())
            await adverts.change_status(data.get('ad_id'), 'active')
            await users.delete_agreement(call.from_user.id, data.get('ad_id'))
            await state.finish()
    else:
        async with state.proxy() as data:
            agreement_users = await users.get_agreement_users(data.get('ad_id'))
            try:
                for message in data.get('media_group'):
                    try:
                        await call.bot.delete_message(call.message.chat.id, int(message.message_id))
                    except MessageToDeleteNotFound:
                        pass
                try:
                    message_id = data.get('cap')
                    message_id_2 = data.get('status_message')
                    await call.bot.delete_message(call.message.chat.id, int(message_id.message_id))
                    await call.bot.delete_message(call.message.chat.id, int(message_id_2.message_id))
                except MessageToDeleteNotFound:
                    pass
            except TypeError:
                pass
        agreement_id, author_id, user_id = agreement_users
        await users.delete_agreement(call.from_user.id, data.get('ad_id'))
        try:
            await call.bot.send_message(int(author_id), "–û–∫–µ–π, –æ—Ü–µ–Ω–∏—Ç–µ –æ–ø—ã—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º:",
                                        reply_markup=inline.rating(agreement_id))
            await call.bot.send_message(
                int(user_id), f"–í–ª–∞–¥–µ–ª–µ—Ü –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ—Ç–∏–ª –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID {data.get('ad_id')} –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–µ! "
                              "–û—Ü–µ–Ω–∏—Ç–µ –æ–ø—ã—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
                reply_markup=inline.rating(agreement_id))
        except BotBlocked:
            print("–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!")
        await state.finish()


async def handle_agreement_status(msg: types.Message, state: FSMContext):
    if not msg.text.isdigit():
        await msg.delete()
        isdigit_message = await msg.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ ID —Ü–∏—Ñ—Ä–∞–º–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
        async with state.proxy() as data:
            data['isdigit_message'] = isdigit_message
    else:
        all_users = await users.get_users_list()
        if int(msg.text) not in all_users:
            await msg.delete()
            wrong_user = await msg.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º ID –Ω–µ—Ç –≤ –±–∞–∑–µ, –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ä–∞–∑!')
            async with state.proxy() as data:
                data['wrong_user'] = wrong_user
        else:
            async with state.proxy() as data:
                try:
                    for message in data.get('media_group'):
                        try:
                            await msg.bot.delete_message(msg.chat.id, int(message.message_id))
                        except MessageToDeleteNotFound:
                            pass
                    try:
                        message_id = data.get('cap')
                        await msg.bot.delete_message(msg.chat.id, int(message_id.message_id))
                    except MessageToDeleteNotFound:
                        pass
                except TypeError:
                    pass
                await users.new_agreement(msg.from_id, int(msg.text), data.get('ad_id'))
                await adverts.change_status(data.get('ad_id'), 'agreement')
                await msg.delete()
                try:
                    message_id = data.get('agreement_message')
                    message_id_2 = data.get('isdigit_message')
                    message_id_3 = data.get('wrong_user')
                    await msg.bot.delete_message(msg.chat.id, int(message_id.message_id))
                    await msg.bot.delete_message(msg.chat.id, int(message_id_2.message_id))
                    await msg.bot.delete_message(msg.chat.id, int(message_id_3.message_id))
                except MessageToDeleteNotFound:
                    pass
                except AttributeError:
                    pass
                try:
                    await msg.bot.send_message(
                        int(msg.text), f"–í–∞—Å –æ—Ç–º–µ—Ç–∏–ª–∏ –∫–∞–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ —Å ID {data.get('ad_id')}!")
                except BotBlocked:
                    print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞!")
                await msg.answer(f"–°—Ç–∞—Ç—É—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è c ID {data.get('ad_id')} –∏–∑–º–µ–Ω—ë–Ω!",
                                 reply_markup=inline.profile_menu())
                await state.finish()


async def handle_rating(call: types.CallbackQuery, state: FSMContext):
    if call.data.split("_")[1] == 'cancel':
        await call.message.edit_text("–û—Ç–º–µ–Ω–∞!")
    else:
        agreement_id = call.data.split("_")[1]
        rating = call.data.split("_")[2]
        agreement_data = await users.get_agreement_data(int(agreement_id))
        advert_id, author_id, user_id = agreement_data
        if call.from_user.id == author_id:
            mess = await call.message.edit_text(
                f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ü–µ–Ω–∫—É {rating} –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è.\n\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–π "
                f"–æ—Ç–∑—ã–≤, –Ω–µ –±–æ–ª–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤:")
            await Review.review.set()
            await state.update_data(
                {"user_id": user_id, "advert_id": advert_id, "message": mess.message_id, "rating": rating})
        if call.from_user.id == user_id:
            mess = await call.message.edit_text(
                f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ü–µ–Ω–∫—É {rating} –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å ID {advert_id}."
                f"\n\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç–∑—ã–≤, –Ω–µ –±–æ–ª–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤:")
            await Review.review.set()
            await state.update_data(
                {"user_id": author_id, "advert_id": advert_id, "message": mess.message_id, "rating": rating})


async def handle_review(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        explicit_words = await adverts.get_explicit_words()
        found_words = []
        for word in explicit_words:
            if word in msg.text.lower():
                found_words.append(word)
        if found_words:
            await msg.delete()
            await msg.answer(f"–ù–∞–π–¥–µ–Ω—ã –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: {', '.join(found_words)}"
                             f"\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ, –∏–∑–±–µ–≥–∞—è –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤")
        else:
            data['author_id'] = msg.from_id
            data['review'] = msg.text
            await msg.bot.delete_message(msg.chat.id, int(data.get('message')))
            await review.new_review(data.get('author_id'), data.get('user_id'), msg.text)
            await msg.delete()
            await adverts.change_status(data.get('advert_id'), 'confirm')
            await users.update_user_rating(data.get('user_id'), data.get('rating'))
            advert_author = await adverts.get_advert_data(data.get('advert_id'))
            if advert_author[8] == msg.from_id:
                await msg.answer(f"–°—Ç–∞—Ç—É—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å ID {data.get('advert_id')} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!"
                                 f"\n\n–û—Ç–∑—ã–≤ –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", reply_markup=inline.main_menu())
            else:
                await msg.answer("–û—Ç–∑—ã–≤ –¥–ª—è –∞–≤—Ç–æ—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", reply_markup=inline.main_menu())
            await state.finish()


async def get_reviews(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'main_menu_search':
        await state.finish()
        await profile_menu(call)
    else:
        results = await review.get_user_review(call.from_user.id)
        if results:
            current_index = 0
            result = results[current_index]
            author_name = await users.get_user_data(result[1])
            text = f'<b>–û—Ç–∑—ã–≤ {current_index + 1} –∏–∑ {len(results)}:</b>' \
                   f'\n<b>ID –∞–≤—Ç–æ—Ä–∞ –æ—Ç–∑—ã–≤–∞:</b> {result[1]}\n<b>–ü–æ–ª–Ω–æ–µ –∏–º—è:</b> {author_name[2]}' \
                   f'\n\n<b>–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞:</b>\n<em>{result[0]}</em>'
            await call.message.edit_text(text, reply_markup=inline.review_pagination(results, current_index))
            await Review.paginate.set()
            async with state.proxy() as data:
                data['current_index'] = current_index
        else:
            await call.message.edit_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∏–∫—Ç–æ –Ω–µ –æ—Å—Ç–∞–≤–ª—è–ª –Ω–∞ –≤–∞—Å –æ—Ç–∑—ã–≤!",
                                         reply_markup=inline.main_menu())


async def handle_review_pagination(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'main_menu_search':
        await state.finish()
        await profile_menu(call)
    else:
        results = await review.get_user_review(call.from_user.id)
        if results:
            async with state.proxy() as data:
                current_index = data.get('current_index')
            result = results[current_index]
            author_name = await users.get_user_data(result[1])
            if call.data.startswith('prev') or call.data.startswith('next'):
                callback_data = call.data.split(":")
                current_index = int(callback_data[1])
                action = callback_data[0]
                if action == "next":
                    if current_index + 1 < len(results):
                        current_index += 1
                elif action == "prev":
                    if current_index > 0:
                        current_index -= 1
                result = results[current_index]
                text = f'<b>–û—Ç–∑—ã–≤ {current_index + 1} –∏–∑ {len(results)}:</b>' \
                       f'\n<b>ID –∞–≤—Ç–æ—Ä–∞ –æ—Ç–∑—ã–≤–∞:</b> {result[1]}\n<b>–ü–æ–ª–Ω–æ–µ –∏–º—è:</b> {author_name[2]}' \
                       f'\n\n<b>–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞:</b>\n<em>{result[0]}</em>'
                await call.message.edit_text(text, reply_markup=inline.review_pagination(results, current_index))
                async with state.proxy() as data:
                    data['current_index'] = current_index
            elif call.data == 'main_menu_review':
                name = call.from_user.first_name
                await state.finish()
                await call.message.edit_text(f"{name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Freebies Bot!",
                                             reply_markup=inline.main_menu())


def register(dp: Dispatcher):
    dp.register_callback_query_handler(profile_menu, text='profile')
    dp.register_callback_query_handler(change_region, text='change_region')
    dp.register_callback_query_handler(handle_change_region_letter, state=ChangeRegion.region)
    dp.register_callback_query_handler(change_moscow_city_selection, state=ChangeRegion.moscow)
    dp.register_callback_query_handler(change_city_selection, state=ChangeRegion.city)
    dp.register_callback_query_handler(finish_change_region, state=ChangeRegion.finish)
    dp.register_callback_query_handler(my_adverts, text='my_adverts')
    dp.register_callback_query_handler(paginate_my_adverts, state=UserAdverts.advert)
    dp.register_callback_query_handler(delete_advert, state=UserAdverts.delete)
    dp.register_callback_query_handler(change_status, state=UserAdverts.status)
    dp.register_message_handler(handle_agreement_status, state=UserAdverts.agreement)
    dp.register_callback_query_handler(handle_rating, lambda c: c.data.startswith('rating_'))
    dp.register_message_handler(handle_review, state=Review.review)
    dp.register_callback_query_handler(get_reviews, text='reviews')
    dp.register_callback_query_handler(handle_review_pagination, state=Review.paginate)
